apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: '10'
  labels:
    name: acme-dns
  name: acme-dns
  namespace: syn-cert-manager
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: '10'
  labels:
    name: acme-dns-secret-editor
  name: acme-dns-secret-editor
  namespace: syn-cert-manager
rules:
  - apiGroups:
      - ''
    resources:
      - secrets
    verbs:
      - create
      - patch
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: '10'
  labels:
    name: acme-dns-secret-editor
  name: acme-dns-secret-editor
  namespace: syn-cert-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: acme-dns-secret-editor
subjects:
  - kind: ServiceAccount
    name: acme-dns
    namespace: syn-cert-manager
---
apiVersion: v1
data:
  check.sh: |
    #!/bin/sh

    set -e

    # Extract acme-dns client config from mounted secret file with `jq` and inject
    # as variables into the script environment with `eval`.
    username=
    password=
    subdomain=
    acmedns_config=$(jq -r --argjson fqdns "${ACME_DNS_FQDNS}" '
        .[$fqdns[0]]
        | "username=\(.username) password=\(.password) subdomain=\(.subdomain)"
      ' "${CONFIG_PATH}/acmedns.json")
    # This overrides the empty variables declared above
    eval "${acmedns_config}"

    reregister=
    if ! curl \
      -H"X-Api-User: ${username}" \
      -H"X-Api-Key: ${password}" \
      -d '{
        "subdomain": "'"${subdomain}"'",
        "txt": "___self___verify___client___credentials____"
      }' "${ACME_DNS_API}"/update; then
      echo "Failed to update record... trying reregistration"
      reregister="yes"
    fi

    if [ -n "${reregister}" ]; then
      "${SCRIPTS_PATH}/register.sh" force
    fi
  register.sh: |
    #!/bin/sh

    set -e

    readonly force_register="${1}"
    readonly client_creds_file="${CONFIG_PATH}/acmedns.json"

    readonly orig_secret="$(kubectl -n "${NAMESPACE}" \
      get secret "${CLIENT_SECRET_NAME}" -ojson)"

    reg_auth_args=
    if [ -n "${REG_USERNAME}" ]; then
      reg_auth_args="-u${REG_USERNAME}:${REG_PASSWORD}"
    fi


    if ! [ -f "${client_creds_file}" ] \
      || [ -n "${force_register}" ]; then

      reg=$(curl -XPOST "${reg_auth_args}" "${ACME_DNS_API}/register")
      # Create acme-dns-client secret for provided domain names.
      # Required format for acmedns.json in `stringData`:
      # {
      #   "example.com": { registration output },
      #   "example.org": { registration output }
      # }
      client_secret=$(jq -n \
        --argjson orig_secret "${orig_secret}" \
        --argjson reg "${reg}" \
        --argjson fqdns "${ACME_DNS_FQDNS}" \
        --arg client_secret_name "${CLIENT_SECRET_NAME}" \
        --arg namespace "${NAMESPACE}" \
        '($orig_secret
          |del(.metadata.annotations."kubectl.kubernetes.io/last-applied-configuration")
         ) + {
          "stringData": {
            "acmedns.json": (reduce $fqdns[] as $d ({}; . + { ($d): $reg })) | tojson
          }
        }')

      echo "${client_secret}" >"${HOME}/secret.json"
      # Use kubectl apply as the empty secret is created by ArgoCD
      kubectl apply -f "${HOME}/secret.json"
    else
      echo "Client credentials config '${client_creds_file}' already exists."
    fi
kind: ConfigMap
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: '10'
  labels:
    name: acme-dns-scripts
  name: acme-dns-scripts
  namespace: syn-cert-manager
