apiVersion: v1
kind: ServiceAccount
metadata:
  annotations: {}
  labels:
    name: acme-dns
  name: acme-dns
  namespace: syn-cert-manager
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations: {}
  labels:
    name: acme-dns-secret-editor
  name: acme-dns-secret-editor
  namespace: syn-cert-manager
rules:
  - apiGroups:
      - ''
    resources:
      - secrets
    verbs:
      - create
      - patch
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations: {}
  labels:
    name: acme-dns-secret-editor
  name: acme-dns-secret-editor
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: acme-dns-secret-editor
subjects:
  - kind: ServiceAccount
    name: acme-dns
    namespace: syn-cert-manager
---
apiVersion: v1
data:
  check.sh: |
    #!/bin/sh

    set -e

    # Extract acme-dns client config from mounted secret file with `jq` and inject
    # as variables into the script environment with `eval`.
    username=
    password=
    subdomain=
    acmedns_config=$(jq -r --argjson fqdns "${ACME_DNS_FQDNS}" '
        .[$fqdns[0]]
        | "username=\(.username) password=\(.password) subdomain=\(.subdomain)"
      ' "${CONFIG_PATH}/acmedns.json")
    # This overrides the empty variables declared above
    eval "${acmedns_config}"

    reregister=
    if ! curl \
      -H"X-Api-User: ${username}" \
      -H"X-Api-Key: ${password}" \
      -d '{
        "subdomain": "'"${subdomain}"'",
        "txt": "___self___verify___client___credentials____"
      }' "${ACME_DNS_API}"/update; then
      echo "Failed to update record... trying reregistration"
      reregister="yes"
    fi

    if [ -n "${reregister}" ]; then
      "${SCRIPTS_PATH}/register.sh" force
    fi
  register.sh: |
    #!/bin/sh

    set -e

    readonly force_register="${1}"
    readonly client_creds_file="${CONFIG_PATH}/acmedns.json"

    readonly orig_secret="$(kubectl -n "${NAMESPACE}" \
      get secret "${CLIENT_SECRET_NAME}" -ojson)"

    reg_auth_args=
    if [ -n "${REG_USERNAME}" ]; then
      reg_auth_args="-u${REG_USERNAME}:${REG_PASSWORD}"
    fi


    if ! [ -f "${client_creds_file}" ] \
      || [ -n "${force_register}" ]; then

      reg=$(curl -XPOST "${reg_auth_args}" "${ACME_DNS_API}/register")
      # Create acme-dns-client secret for provided domain names.
      # Required format for acmedns.json in `stringData`:
      # {
      #   "example.com": { registration output },
      #   "example.org": { registration output }
      # }
      client_secret=$(jq -n \
        --argjson orig_secret "${orig_secret}" \
        --argjson reg "${reg}" \
        --argjson fqdns "${ACME_DNS_FQDNS}" \
        --arg client_secret_name "${CLIENT_SECRET_NAME}" \
        --arg namespace "${NAMESPACE}" \
        '($orig_secret
          |del(.metadata.annotations."kubectl.kubernetes.io/last-applied-configuration")
         ) + {
          "stringData": {
            "acmedns.json": (reduce $fqdns[] as $d ({}; . + { ($d): $reg })) | tojson
          }
        }')

      echo "${client_secret}" >"${HOME}/secret.json"
      # Use kubectl apply as the empty secret is created by ArgoCD
      kubectl apply -f "${HOME}/secret.json"
    else
      echo "Client credentials config '${client_creds_file}' already exists."
    fi
kind: ConfigMap
metadata:
  annotations: {}
  labels:
    name: register-acme-dns-client
  name: register-acme-dns-client
  namespace: syn-cert-manager
---
apiVersion: v1
data: {}
kind: Secret
metadata:
  annotations: {}
  labels:
    name: acme-dns-register
  name: acme-dns-register
  namespace: syn-cert-manager
stringData:
  REG_PASSWORD: t-silent-test-1234/c-green-test-1234/cert-manager/acme-dns-register-password
  REG_USERNAME: acme-dns
type: Opaque
---
apiVersion: v1
data: {}
kind: Secret
metadata:
  annotations:
    cert-manager.syn.tools/managed-by: The contents of this secret are managed by
      resources Job/create-acme-dns-client and CronJob/check-acme-dns-client
  labels:
    name: acme-dns-client
  name: acme-dns-client
  namespace: syn-cert-manager
type: Opaque
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
  labels:
    name: create-acme-dns-client
  name: create-acme-dns-client
  namespace: syn-cert-manager
spec:
  completions: 1
  parallelism: 1
  template:
    metadata:
      labels:
        name: create-acme-dns-client
    spec:
      containers:
        - args: []
          command:
            - /scripts/register.sh
          env:
            - name: ACME_DNS_API
              value: acme-dns-api.example.com
            - name: ACME_DNS_FQDNS
              value: '["example.com", "apps.example.com"]'
            - name: CLIENT_SECRET_NAME
              value: acme-dns-client
            - name: CONFIG_PATH
              value: /etc/acme-dns
            - name: HOME
              value: /home/acme-dns
            - name: HTTPS_PROXY
              value: ''
            - name: HTTP_PROXY
              value: ''
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NO_PROXY
              value: ''
            - name: SCRIPTS_PATH
              value: /scripts
          envFrom:
            - secretRef:
                name: acme-dns-register
          image: docker.io/bitnami/kubectl:1.27.4@sha256:0070cf603fb95159b153756afc02fae06ed63fee7d65615fd0b9c9b02e1fc646
          imagePullPolicy: IfNotPresent
          name: register-client
          ports: []
          stdin: false
          tty: false
          volumeMounts:
            - mountPath: /etc/acme-dns
              name: acmedns-client-secret
              readOnly: true
            - mountPath: /home/acme-dns
              name: home
            - mountPath: /scripts
              name: scripts
          workingDir: /home/acme-dns
      imagePullSecrets: []
      initContainers: []
      restartPolicy: OnFailure
      serviceAccountName: acme-dns
      terminationGracePeriodSeconds: 30
      volumes:
        - name: acmedns-client-secret
          secret:
            secretName: acme-dns-client
        - emptyDir: {}
          name: home
        - configMap:
            defaultMode: 504
            name: register-acme-dns-client
          name: scripts
---
apiVersion: batch/v1
kind: CronJob
metadata:
  annotations: {}
  labels:
    name: check-acme-dns-client
  name: check-acme-dns-client
  namespace: syn-cert-manager
spec:
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 20
  jobTemplate:
    spec:
      completions: 1
      parallelism: 1
      template:
        metadata:
          labels:
            name: check-acme-dns-client
        spec:
          containers:
            - args: []
              command:
                - /scripts/check.sh
              env:
                - name: ACME_DNS_API
                  value: acme-dns-api.example.com
                - name: ACME_DNS_FQDNS
                  value: '["example.com", "apps.example.com"]'
                - name: CLIENT_SECRET_NAME
                  value: acme-dns-client
                - name: CONFIG_PATH
                  value: /etc/acme-dns
                - name: HOME
                  value: /home/acme-dns
                - name: HTTPS_PROXY
                  value: ''
                - name: HTTP_PROXY
                  value: ''
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: NO_PROXY
                  value: ''
                - name: SCRIPTS_PATH
                  value: /scripts
              envFrom:
                - secretRef:
                    name: acme-dns-register
              image: docker.io/bitnami/kubectl:1.27.4@sha256:0070cf603fb95159b153756afc02fae06ed63fee7d65615fd0b9c9b02e1fc646
              imagePullPolicy: IfNotPresent
              name: check-client
              ports: []
              stdin: false
              tty: false
              volumeMounts:
                - mountPath: /etc/acme-dns
                  name: acmedns-client-secret
                  readOnly: true
                - mountPath: /home/acme-dns
                  name: home
                - mountPath: /scripts
                  name: scripts
              workingDir: /home/acme-dns
          imagePullSecrets: []
          initContainers: []
          restartPolicy: OnFailure
          serviceAccountName: acme-dns
          terminationGracePeriodSeconds: 30
          volumes:
            - name: acmedns-client-secret
              secret:
                secretName: acme-dns-client
            - emptyDir: {}
              name: home
            - configMap:
                defaultMode: 504
                name: register-acme-dns-client
              name: scripts
  schedule: 47 1 * * *
  successfulJobsHistoryLimit: 10
