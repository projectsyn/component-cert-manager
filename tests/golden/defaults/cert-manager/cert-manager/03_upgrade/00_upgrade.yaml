apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: '-10'
  labels:
    name: cert-manager-crd-upgrade
  name: cert-manager-crd-upgrade
rules:
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - get
      - patch
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: '-10'
  labels:
    name: cert-manager-crd-upgrade
  name: cert-manager-crd-upgrade
  namespace: syn-cert-manager
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: '-10'
  labels:
    name: cert-manager-crd-upgrade
  name: cert-manager-crd-upgrade
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cert-manager-crd-upgrade
subjects:
  - kind: ServiceAccount
    name: cert-manager-crd-upgrade
    namespace: syn-cert-manager
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
    argocd.argoproj.io/sync-wave: '-10'
  labels:
    name: cert-manager-crd-upgrade
  name: cert-manager-crd-upgrade
  namespace: syn-cert-manager
spec:
  completions: 1
  parallelism: 1
  template:
    metadata:
      labels:
        name: cert-manager-crd-upgrade
    spec:
      containers:
        - args:
            - -eu
            - -c
            - "#!/bin/sh\nset -eu\n\nfor crd in ${CRDS_TO_PATCH}; do\n  exists=$(kubectl\
              \ get crd \"${crd}\" --ignore-not-found)\n  if [ -z \"$exists\" ]; then\n\
              \    >&2 echo \"WARNING: Skipping '${crd}': not found.\"\n    continue\n\
              \  fi\n  # Export and remove all `metadata` properties except `name`,\
              \ `labels` and `annotations`\n  kubectl get crd \"${crd}\" -o json >\
              \ \"${crd}.json\"\n  jq 'del(.status) | .metadata = (.metadata | {name,\
              \ labels, annotations})' \"${crd}.json\" > \"${crd}.patched.json\"\n\
              \  # Apply the CRD again (this shouldn't change anything, except updating\
              \ the annotation \"kubectl.kubernetes.io/last-applied-configuration\"\
              )\n  # You will also see some warnings in the output mentioning the\
              \ annotation.\n  # This is expected and actually required.\n  kubectl\
              \ apply -f \"${crd}.patched.json\"\ndone\n"
          command:
            - sh
          env:
            - name: CRDS_TO_PATCH
              value: certificaterequests.cert-manager.io certificates.cert-manager.io
                challenges.acme.cert-manager.io clusterissuers.cert-manager.io issuers.cert-manager.io
                orders.acme.cert-manager.io
            - name: HOME
              value: /export
          image: docker.io/bitnami/kubectl:1.24.4@sha256:d3c17f1dc6e665dcc78e8c14a83ae630bc3d65b07ea11c5f1a012c2c6786d039
          imagePullPolicy: IfNotPresent
          name: cert-manager-crd-upgrade
          ports: []
          stdin: false
          tty: false
          volumeMounts:
            - mountPath: /export
              name: export
          workingDir: /export
      imagePullSecrets: []
      initContainers: []
      restartPolicy: OnFailure
      serviceAccountName: cert-manager-crd-upgrade
      terminationGracePeriodSeconds: 30
      volumes:
        - emptyDir: {}
          name: export
